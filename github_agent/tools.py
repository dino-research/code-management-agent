"""
Custom tools ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi GitHub repository
"""
import re
import os
import subprocess
import tempfile
from typing import Dict, Any, Optional
from urllib.parse import urlparse


def validate_github_url(url: str) -> Dict[str, Any]:
    """
    Validate GitHub URL v√† extract owner/repo information
    
    Args:
        url: GitHub repository URL
        
    Returns:
        Dict ch·ª©a th√¥ng tin validation v√† parsed data
    """
    try:
        # Clean up URL
        url = url.strip()
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
            
        # Parse URL
        parsed = urlparse(url)
        
        if parsed.netloc.lower() not in ['github.com', 'www.github.com']:
            return {
                "valid": False,
                "error": "URL kh√¥ng ph·∫£i c·ªßa GitHub.com",
                "url": url
            }
            
        # Extract owner/repo t·ª´ path
        path_parts = parsed.path.strip('/').split('/')
        if len(path_parts) < 2:
            return {
                "valid": False,
                "error": "URL thi·∫øu th√¥ng tin owner ho·∫∑c repository name",
                "url": url
            }
            
        owner = path_parts[0]
        repo = path_parts[1]
        
        # Remove .git suffix if present
        if repo.endswith('.git'):
            repo = repo[:-4]
            
        return {
            "valid": True,
            "owner": owner,
            "repo": repo,
            "url": url,
            "clean_url": f"https://github.com/{owner}/{repo}"
        }
        
    except Exception as e:
        return {
            "valid": False,
            "error": f"L·ªói khi parse URL: {str(e)}",
            "url": url
        }


def validate_github_token(token: str) -> Dict[str, Any]:
    """
    Validate GitHub Personal Access Token format
    
    Args:
        token: GitHub Personal Access Token
        
    Returns:
        Dict ch·ª©a th√¥ng tin validation
    """
    try:
        token = token.strip()
        
        # Check basic format
        if not token:
            return {
                "valid": False,
                "error": "Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            }
            
        # GitHub tokens c√≥ format kh√°c nhau:
        # - Classic: ghp_xxxx (40 chars total)
        # - Fine-grained: github_pat_xxxx
        if not (token.startswith('ghp_') or token.startswith('github_pat_')):
            return {
                "valid": False,
                "error": "Token kh√¥ng ƒë√∫ng format GitHub. Token ph·∫£i b·∫Øt ƒë·∫ßu v·ªõi 'ghp_' ho·∫∑c 'github_pat_'"
            }
            
        if token.startswith('ghp_') and len(token) != 40:
            return {
                "valid": False,
                "error": "Classic GitHub token ph·∫£i c√≥ ƒë√∫ng 40 k√Ω t·ª±"
            }
            
        return {
            "valid": True,
            "token_type": "classic" if token.startswith('ghp_') else "fine-grained",
            "message": "Token format h·ª£p l·ªá"
        }
        
    except Exception as e:
        return {
            "valid": False,
            "error": f"L·ªói khi validate token: {str(e)}"
        }


def setup_github_environment(github_url: str, token: str) -> Dict[str, Any]:
    """
    Setup environment cho github-mcp-server v√† ADK
    
    Args:
        github_url: GitHub repository URL
        token: GitHub Personal Access Token
        
    Returns:
        Dict ch·ª©a th√¥ng tin setup
    """
    try:
        # Validate inputs
        url_validation = validate_github_url(github_url)
        if not url_validation["valid"]:
            return {
                "success": False,
                "error": f"GitHub URL kh√¥ng h·ª£p l·ªá: {url_validation['error']}"
            }
            
        token_validation = validate_github_token(token)
        if not token_validation["valid"]:
            return {
                "success": False,
                "error": f"GitHub token kh√¥ng h·ª£p l·ªá: {token_validation['error']}"
            }
            
        # Set environment variables for github-mcp-server
        # ƒê√¢y l√† c√°ch github-mcp-server expect environment variable
        os.environ['GITHUB_PERSONAL_ACCESS_TOKEN'] = token
        
        # L∆∞u th√¥ng tin cho session (ƒë·ªÉ c√≥ th·ªÉ reference sau n√†y)
        repository_info = {
            "owner": url_validation["owner"],
            "repo": url_validation["repo"],
            "clean_url": url_validation["clean_url"],
            "token_type": token_validation["token_type"]
        }
        
        return {
            "success": True,
            "message": "Environment ƒë√£ ƒë∆∞·ª£c setup th√†nh c√¥ng cho github-mcp-server",
            "repository": repository_info,
            "note": "B√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c GitHub MCP tools ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi repository"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": f"L·ªói khi setup environment: {str(e)}"
        }


def clone_repository(github_url: str, destination_path: Optional[str] = None) -> Dict[str, Any]:
    """
    Clone GitHub repository v·ªÅ local (alternative method)
    
    Args:
        github_url: GitHub repository URL
        destination_path: ƒê∆∞·ªùng d·∫´n ƒë·ªÉ clone (optional)
        
    Returns:
        Dict ch·ª©a th√¥ng tin v·ªÅ qu√° tr√¨nh clone
    """
    try:
        # Validate GitHub URL
        url_validation = validate_github_url(github_url)
        if not url_validation["valid"]:
            return {
                "success": False,
                "error": f"GitHub URL kh√¥ng h·ª£p l·ªá: {url_validation['error']}"
            }
            
        # Prepare destination
        if destination_path is None:
            destination_path = tempfile.mkdtemp()
            
        repo_path = os.path.join(destination_path, url_validation["repo"])
        
        # Check if token is available
        token = os.getenv('GITHUB_PERSONAL_ACCESS_TOKEN')
        if not token:
            return {
                "success": False,
                "error": "GITHUB_PERSONAL_ACCESS_TOKEN ch∆∞a ƒë∆∞·ª£c set. H√£y ch·∫°y setup_github_environment tr∆∞·ªõc."
            }
            
        # Prepare clone URL with authentication
        clone_url = f"https://{token}@github.com/{url_validation['owner']}/{url_validation['repo']}.git"
        
        # Execute git clone
        result = subprocess.run(
            ['git', 'clone', clone_url, repo_path],
            capture_output=True,
            text=True,
            timeout=300  # 5 minutes timeout
        )
        
        if result.returncode == 0:
            return {
                "success": True,
                "repo_path": repo_path,
                "owner": url_validation["owner"],
                "repo": url_validation["repo"],
                "message": f"Repository ƒë√£ ƒë∆∞·ª£c clone th√†nh c√¥ng v√†o {repo_path}"
            }
        else:
            return {
                "success": False,
                "error": f"L·ªói khi clone repository: {result.stderr}",
                "returncode": result.returncode
            }
            
    except subprocess.TimeoutExpired:
        return {
            "success": False,
            "error": "Clone repository timeout (5 minutes)"
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"L·ªói kh√¥ng mong ƒë·ª£i: {str(e)}"
        }


def get_repository_info(owner: str, repo: str) -> str:
    """
    L·∫•y th√¥ng tin c∆° b·∫£n v·ªÅ repository
    
    Args:
        owner: Repository owner
        repo: Repository name
        
    Returns:
        String ch·ª©a th√¥ng tin repository
    """
    return f"""
Repository Information:
- Owner: {owner}
- Name: {repo}
- URL: https://github.com/{owner}/{repo}

ƒê·ªÉ l·∫•y th√¥ng tin chi ti·∫øt h∆°n, h√£y s·ª≠ d·ª•ng GitHub MCP tools sau khi setup environment.
V√≠ d·ª•: get_repository, get_repository_content, search_repositories, etc.
    """.strip()


def show_github_setup_guide() -> str:
    """
    Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n setup GitHub Personal Access Token
    
    Returns:
        String ch·ª©a h∆∞·ªõng d·∫´n setup
    """
    return """
# üîß H∆∞·ªõng d·∫´n thi·∫øt l·∫≠p GitHub Personal Access Token

## B∆∞·ªõc 1: Truy c·∫≠p GitHub Settings
1. ƒêƒÉng nh·∫≠p v√†o GitHub.com
2. Click v√†o avatar c·ªßa b·∫°n ·ªü g√≥c ph·∫£i tr√™n
3. Ch·ªçn **Settings**

## B∆∞·ªõc 2: T·∫°o Personal Access Token
1. Trong sidebar b√™n tr√°i, ch·ªçn **Developer settings**
2. Ch·ªçn **Personal access tokens** > **Tokens (classic)**
3. Click **Generate new token** > **Generate new token (classic)**

## B∆∞·ªõc 3: C·∫•u h√¨nh Token
1. **Note**: Nh·∫≠p m√¥ t·∫£ cho token (v√≠ d·ª•: "ADK GitHub Agent")
2. **Expiration**: Ch·ªçn th·ªùi h·∫°n (khuy·∫øn ngh·ªã: 90 days)
3. **Select scopes**: Ch·ªçn c√°c quy·ªÅn c·∫ßn thi·∫øt:
   - ‚úÖ **repo** (Full control of private repositories)
   - ‚úÖ **read:org** (Read org and team membership)
   - ‚úÖ **user:email** (Access user email addresses)
   - ‚úÖ **workflow** (Update GitHub Action workflows) - n·∫øu c·∫ßn

## B∆∞·ªõc 4: T·∫°o v√† L∆∞u Token
1. Click **Generate token**
2. **‚ö†Ô∏è QUAN TR·ªåNG**: Copy token ngay l·∫≠p t·ª©c v√† l∆∞u v√†o n∆°i an to√†n
3. B·∫°n s·∫Ω kh√¥ng th·ªÉ xem l·∫°i token n√†y!

## B∆∞·ªõc 5: S·ª≠ d·ª•ng Token
- Token s·∫Ω c√≥ d·∫°ng: `ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`
- Gi·ªØ token n√†y b√≠ m·∫≠t, kh√¥ng chia s·∫ª v·ªõi ai
- S·ª≠ d·ª•ng token n√†y khi agent h·ªèi v·ªÅ GITHUB_PERSONAL_ACCESS_TOKEN

## B∆∞·ªõc 6: Sau khi c√≥ token
1. Cung c·∫•p GitHub repository URL (v√≠ d·ª•: https://github.com/owner/repo)
2. Cung c·∫•p token khi ƒë∆∞·ª£c y√™u c·∫ßu
3. Agent s·∫Ω setup environment v√† cho ph√©p s·ª≠ d·ª•ng GitHub MCP tools

## üîí L∆∞u √Ω b·∫£o m·∫≠t:
- Kh√¥ng commit token v√†o code
- Kh√¥ng chia s·∫ª token tr√™n chat/email
- Revoke token n·∫øu nghi ng·ªù b·ªã l·ªô
- S·ª≠ d·ª•ng token v·ªõi expiration date h·ª£p l√Ω
- Monitor token usage qua GitHub Settings

## üöÄ GitHub MCP Tools c√≥ s·∫µn:
Sau khi setup, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c tools sau:
- **get_repository**: L·∫•y th√¥ng tin repository
- **get_repository_content**: Xem n·ªôi dung files/folders
- **search_repositories**: T√¨m ki·∫øm repositories
- **list_commits**: Xem l·ªãch s·ª≠ commits
- **create_branch**: T·∫°o branch m·ªõi
- **search_code**: T√¨m ki·∫øm code
- **get_file_contents**: ƒê·ªçc n·ªôi dung file c·ª• th·ªÉ
- **list_branches**: Li·ªát k√™ c√°c branches
- V√† nhi·ªÅu tools kh√°c...
    """.strip()


def initialize_github_mcp_connection(github_token: str, github_url: str = "") -> str:
    """
    Kh·ªüi t·∫°o k·∫øt n·ªëi MCP v·ªõi github-mcp-server sau khi c√≥ GitHub token
    
    Args:
        github_token: GitHub Personal Access Token
        github_url: GitHub repository URL (optional)
        
    Returns:
        str: Th√¥ng b√°o k·∫øt qu·∫£
    """
    try:
        # Validate token first
        token_validation = validate_github_token(github_token)
        if not token_validation["valid"]:
            return f"‚ùå Token kh√¥ng h·ª£p l·ªá: {token_validation['error']}"
        
        # Set environment variable cho github-mcp-server
        os.environ["GITHUB_PERSONAL_ACCESS_TOKEN"] = github_token
        
        # N·∫øu c√≥ GitHub URL, extract repo info ƒë·ªÉ set th√™m context
        if github_url:
            url_validation = validate_github_url(github_url)
            if url_validation["valid"]:
                owner = url_validation["owner"]
                repo = url_validation["repo"]
                os.environ["GITHUB_REPOSITORY"] = f"{owner}/{repo}"
                os.environ["GITHUB_OWNER"] = owner
                return f"‚úÖ ƒê√£ thi·∫øt l·∫≠p k·∫øt n·ªëi MCP v·ªõi GitHub th√†nh c√¥ng!\nüìÅ Repository: {owner}/{repo}\nüîê Token type: {token_validation['token_type']}"
            else:
                return f"‚úÖ ƒê√£ thi·∫øt l·∫≠p token MCP v·ªõi GitHub th√†nh c√¥ng!\n‚ö†Ô∏è GitHub URL c√≥ l·ªói: {url_validation['error']}\nüîê Token type: {token_validation['token_type']}"
        else:
            return f"‚úÖ ƒê√£ thi·∫øt l·∫≠p token MCP v·ªõi GitHub th√†nh c√¥ng!\nüîê Token type: {token_validation['token_type']}\nüí° B·∫°n c√≥ th·ªÉ cung c·∫•p GitHub URL ƒë·ªÉ c√≥ th√™m context v·ªÅ repository."
        
    except Exception as e:
        return f"‚ùå L·ªói khi thi·∫øt l·∫≠p k·∫øt n·ªëi MCP: {str(e)}" 